#include<cstdio>
#include<cstring>
#define IN getc(stdin)

int goodpile = 52;

struct card {
	char value,suit;
};

bool match(card a, card b) {
	return a.value==b.value || a.suit == b.suit;
}

struct pile {
	card[52];
	int left,right,size;
	pile():left(-1),right(-1),size(-1) {
		memset(card,0,sizeof(card));
	}
	card top() {
		return card[size-1];
	}
} Pile[52];

void move(int i) {
	if(i<=0) return ;
	if(Pile[i].left>=0 && Pile[Pile[i].left].left>=0 && Pile[Pile[Pile[i].left].left].left >=0 )
	{
		int left3 = Pile[Pile[Pile[i].left].left].left;
		if(match(Pile[i].top(),Pile[left3].top()) {
			card movecard = Pile[i].top();
			Pile[i].size--;
			if(Pile[i].size==0)
				goodpile--;
			Pile[left3].size++;
			Pile[left3].card[Pile[left3].size-1] = movecard;
			if(Pile[i].size==0) {
				Pile[Pile[i].left].right = Pile[i].right;
				Pile[Pile[i].right].left = Pile[i].left;
			}
			move(left3);
		} 
	} else if(Pile[i].left>=0) {
		int left1 = Pile[i].left;
		if(match(Pile[i].top(),Pile[left1].top()) {
			card movecard = Pile[i].top();
			Pile[i].size--;
			if(Pile[i].size==0)
				goodpile--;
			Pile[left1].size++;
			Pile[left1].card[Pile[left1].size-1] = movecard;
			if(Pile[i].size==0) {
				Pile[Pile[i].left].right = Pile[i].right;
				Pile[Pile[i].right].left = Pile[i].left;
			}
			move(left1);
		}
	}
	return;
}

int main() {
	while((h=IN)!='#') {
		goodpile = 52;
		for(int i=0;i<52,i++) {
			while(isspace(h))
				h = IN;
			Pile[i].card[0].value = h; 
			h = IN;
			Pile[i].card[0].suit = h;
			Pile[i].left = i-1;
			Pile[i].right = i+1;
			Pile[i].size = 1;
		}
		for(int i=0;i!=52;i=Pile[i].right) {
			move(i);
		}
		if(goodpile>1)
			printf("%d piles remaining:");
		else if(goodpile==1)
			printf("1 pile remaining:");
		for(int i=0;i!=52;i=Pile[i].right)
			printf(" %d",Pile[i].size);
		printf("\n");
	}
	return 0;
}

